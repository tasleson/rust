//! DO NOT EDIT
//! This file is automatically generated by the varlink rust generator

#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused_imports)]

use failure::{Backtrace, Context, Fail, ResultExt};
use serde_json::{self, Value};
use std::fmt::{self, Display};
use std::io;
use std::sync::{Arc, RwLock};
use varlink::{self, CallTrait};

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct Netdev {
    pub ifindex: i64,
    pub ifname: String,
}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct NetdevInfo {
    pub ifindex: i64,
    pub ifname: String,
}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct InfoReply_ {
    pub info: NetdevInfo,
}

impl varlink::VarlinkReply for InfoReply_ {}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct InfoArgs_ {
    pub ifindex: i64,
}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct ListReply_ {
    pub netdevs: Vec<Netdev>,
}

impl varlink::VarlinkReply for ListReply_ {}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct ListArgs_ {}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct UnknownErrorArgs_ {
    pub text: String,
}

#[derive(Serialize, Deserialize, Debug, PartialEq, Clone)]
pub struct UnknownNetworkIfIndexArgs_ {
    pub ifindex: i64,
}

pub trait VarlinkCallError: varlink::CallTrait {
    fn reply_unknown_error(&mut self, text: String) -> varlink::Result<()> {
        self.reply_struct(varlink::Reply::error(
            "io.systemd.network.UnknownError",
            Some(serde_json::to_value(UnknownErrorArgs_ { text })?),
        ))
    }
    fn reply_unknown_network_if_index(&mut self, ifindex: i64) -> varlink::Result<()> {
        self.reply_struct(varlink::Reply::error(
            "io.systemd.network.UnknownNetworkIfIndex",
            Some(serde_json::to_value(UnknownNetworkIfIndexArgs_ {
                ifindex,
            })?),
        ))
    }
}

impl<'a> VarlinkCallError for varlink::Call<'a> {}

#[derive(Debug)]
pub struct Error {
    inner: Context<ErrorKind>,
}

#[derive(Clone, PartialEq, Debug, Fail)]
pub enum ErrorKind {
    #[fail(display = "IO error")]
    Io_,
    #[fail(display = "(De)Serialization Error")]
    SerdeJson_,
    #[fail(display = "Varlink Error")]
    Varlink(varlink::ErrorKind),
    #[fail(display = "Unknown error: '{:#?}'", _0)]
    Unknown_(varlink::Reply),
    #[fail(display = "io.systemd.network.UnknownError: {:#?}", _0)]
    UnknownError(Option<UnknownErrorArgs_>),
    #[fail(display = "io.systemd.network.UnknownNetworkIfIndex: {:#?}", _0)]
    UnknownNetworkIfIndex(Option<UnknownNetworkIfIndexArgs_>),
}

impl Fail for Error {
    fn cause(&self) -> Option<&Fail> {
        self.inner.cause()
    }

    fn backtrace(&self) -> Option<&Backtrace> {
        self.inner.backtrace()
    }
}

impl Display for Error {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        Display::fmt(&self.inner, f)
    }
}

impl Error {
    pub fn kind(&self) -> ErrorKind {
        self.inner.get_context().clone()
    }
}

impl From<ErrorKind> for Error {
    fn from(kind: ErrorKind) -> Error {
        Error {
            inner: Context::new(kind),
        }
    }
}

impl From<Context<ErrorKind>> for Error {
    fn from(inner: Context<ErrorKind>) -> Error {
        Error { inner }
    }
}

impl From<::std::io::Error> for Error {
    fn from(e: ::std::io::Error) -> Error {
        e.context(ErrorKind::Io_).into()
    }
}

impl From<serde_json::Error> for Error {
    fn from(e: serde_json::Error) -> Error {
        e.context(ErrorKind::SerdeJson_).into()
    }
}

pub type Result<T> = ::std::result::Result<T, Error>;

impl From<varlink::Error> for Error {
    fn from(e: varlink::Error) -> Self {
        let kind = e.kind();
        match kind {
            varlink::ErrorKind::Io => e.context(ErrorKind::Io_).into(),
            varlink::ErrorKind::SerdeJson => e.context(ErrorKind::SerdeJson_).into(),
            kind => e.context(ErrorKind::Varlink(kind)).into(),
        }
    }
}

impl From<varlink::Reply> for Error {
    fn from(e: varlink::Reply) -> Self {
        if varlink::Error::is_error(&e) {
            return varlink::Error::from(e).into();
        }

        match e {
            varlink::Reply {
                error: Some(ref t), ..
            } if t == "io.systemd.network.UnknownError" =>
            {
                match e {
                    varlink::Reply {
                        parameters: Some(p),
                        ..
                    } => match serde_json::from_value(p) {
                        Ok(v) => ErrorKind::UnknownError(v).into(),
                        Err(_) => ErrorKind::UnknownError(None).into(),
                    },
                    _ => ErrorKind::UnknownError(None).into(),
                }
            }
            varlink::Reply {
                error: Some(ref t), ..
            } if t == "io.systemd.network.UnknownNetworkIfIndex" =>
            {
                match e {
                    varlink::Reply {
                        parameters: Some(p),
                        ..
                    } => match serde_json::from_value(p) {
                        Ok(v) => ErrorKind::UnknownNetworkIfIndex(v).into(),
                        Err(_) => ErrorKind::UnknownNetworkIfIndex(None).into(),
                    },
                    _ => ErrorKind::UnknownNetworkIfIndex(None).into(),
                }
            }
            _ => return ErrorKind::Unknown_(e).into(),
        }
    }
}

pub trait CallInfo_: VarlinkCallError {
    fn reply(&mut self, info: NetdevInfo) -> varlink::Result<()> {
        self.reply_struct(InfoReply_ { info }.into())
    }
}

impl<'a> CallInfo_ for varlink::Call<'a> {}

pub trait CallList_: VarlinkCallError {
    fn reply(&mut self, netdevs: Vec<Netdev>) -> varlink::Result<()> {
        self.reply_struct(ListReply_ { netdevs }.into())
    }
}

impl<'a> CallList_ for varlink::Call<'a> {}

pub trait VarlinkInterface {
    fn info(&self, call: &mut CallInfo_, ifindex: i64) -> varlink::Result<()>;
    fn list(&self, call: &mut CallList_) -> varlink::Result<()>;
    fn call_upgraded(&self, _call: &mut varlink::Call) -> varlink::Result<()> {
        Ok(())
    }
}

pub trait VarlinkClientInterface {
    fn info(&mut self, ifindex: i64) -> varlink::MethodCall<InfoArgs_, InfoReply_, Error>;
    fn list(&mut self) -> varlink::MethodCall<ListArgs_, ListReply_, Error>;
}

pub struct VarlinkClient {
    connection: Arc<RwLock<varlink::Connection>>,
    more: bool,
    oneway: bool,
}

impl VarlinkClient {
    pub fn new(connection: Arc<RwLock<varlink::Connection>>) -> Self {
        VarlinkClient {
            connection,
            more: false,
            oneway: false,
        }
    }
    pub fn more(&self) -> Self {
        VarlinkClient {
            connection: self.connection.clone(),
            more: true,
            oneway: false,
        }
    }
    pub fn oneway(&self) -> Self {
        VarlinkClient {
            connection: self.connection.clone(),
            more: false,
            oneway: true,
        }
    }
}

impl VarlinkClientInterface for VarlinkClient {
    fn info(&mut self, ifindex: i64) -> varlink::MethodCall<InfoArgs_, InfoReply_, Error> {
        varlink::MethodCall::<InfoArgs_, InfoReply_, Error>::new(
            self.connection.clone(),
            "io.systemd.network.Info",
            InfoArgs_ { ifindex },
        )
    }
    fn list(&mut self) -> varlink::MethodCall<ListArgs_, ListReply_, Error> {
        varlink::MethodCall::<ListArgs_, ListReply_, Error>::new(
            self.connection.clone(),
            "io.systemd.network.List",
            ListArgs_ {},
        )
    }
}

pub struct VarlinkInterfaceProxy {
    inner: Box<VarlinkInterface + Send + Sync>,
}

pub fn new(inner: Box<VarlinkInterface + Send + Sync>) -> VarlinkInterfaceProxy {
    VarlinkInterfaceProxy { inner }
}

impl varlink::Interface for VarlinkInterfaceProxy {
    fn get_description(&self) -> &'static str {
        r#####################################"# Provides information about network state
#
interface io.systemd.network

type NetdevInfo (
  ifindex: int,
  ifname: string
)

type Netdev (
  ifindex: int,
  ifname: string
)

# Returns information about a network device
method Info(ifindex: int) -> (info: NetdevInfo)

# Lists all network devices
method List() -> (netdevs: []Netdev)

error UnknownNetworkIfIndex (ifindex: int)
error UnknownError (text: string)
"#####################################
    }

    fn get_name(&self) -> &'static str {
        "io.systemd.network"
    }

    fn call_upgraded(&self, call: &mut varlink::Call) -> varlink::Result<()> {
        self.inner.call_upgraded(call)
    }

    fn call(&self, call: &mut varlink::Call) -> varlink::Result<()> {
        let req = call.request.unwrap();
        match req.method.as_ref() {
            "io.systemd.network.Info" => {
                if let Some(args) = req.parameters.clone() {
                    let args: InfoArgs_ = serde_json::from_value(args)?;
                    return self.inner.info(call as &mut CallInfo_, args.ifindex);
                } else {
                    return call.reply_invalid_parameter("parameters".into());
                }
            }
            "io.systemd.network.List" => {
                return self.inner.list(call as &mut CallList_);
            }

            m => {
                return call.reply_method_not_found(String::from(m));
            }
        }
    }
}
